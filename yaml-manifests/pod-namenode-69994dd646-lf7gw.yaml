apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2025-05-31T12:52:08Z"
  generateName: namenode-69994dd646-
  labels:
    app: namenode
    pod-template-hash: 69994dd646
  name: namenode-69994dd646-lf7gw
  namespace: default
  ownerReferences:
  - apiVersion: apps/v1
    blockOwnerDeletion: true
    controller: true
    kind: ReplicaSet
    name: namenode-69994dd646
    uid: 7784f741-e7ec-4125-9fcf-59239655c021
  resourceVersion: "202157"
  uid: 8b723afc-35d6-4c25-9621-e54d972e8614
spec:
  containers:
  - args:
    - |
      # Set Hadoop configuration directory
      export HADOOP_CONF_DIR=/opt/hadoop/etc/hadoop

      # Ensure the config directory exists
      mkdir -p $HADOOP_CONF_DIR

      # Create core-site.xml
      cat > $HADOOP_CONF_DIR/core-site.xml << 'EOFXML'
      <?xml version="1.0" encoding="UTF-8"?>
      <configuration>
        <property>
          <name>fs.defaultFS</name>
          <value>hdfs://namenode:8020</value>
        </property>
      </configuration>
      EOFXML

      # Create hdfs-site.xml with binding configuration
      cat > $HADOOP_CONF_DIR/hdfs-site.xml << 'EOFXML'
      <?xml version="1.0" encoding="UTF-8"?>
      <configuration>
        <property>
          <name>dfs.namenode.name.dir</name>
          <value>/hadoop/dfs/name</value>
        </property>
        <property>
          <name>dfs.namenode.datanode.registration.ip-hostname-check</name>
          <value>false</value>
        </property>
        <property>
          <name>dfs.namenode.rpc-bind-host</name>
          <value>0.0.0.0</value>
        </property>
        <property>
          <name>dfs.namenode.servicerpc-bind-host</name>
          <value>0.0.0.0</value>
        </property>
        <property>
          <name>dfs.namenode.http-bind-host</name>
          <value>0.0.0.0</value>
        </property>
      </configuration>
      EOFXML

      # Ensure namenode directory exists
      mkdir -p /hadoop/dfs/name

      # Format namenode if needed
      if [ ! -f /hadoop/dfs/name/current/VERSION ]; then
        echo "Formatting namenode..."
        $HADOOP_HOME/bin/hdfs namenode -format -clusterId test -force -nonInteractive
      fi

      # Start namenode
      echo "Starting namenode with bind host 0.0.0.0..."
      $HADOOP_HOME/bin/hdfs namenode
    command:
    - /bin/bash
    - -c
    env:
    - name: CLUSTER_NAME
      value: test
    - name: HDFS_CONF_fs_defaultFS
      value: hdfs://namenode:8020
    - name: CORE_CONF_fs_defaultFS
      value: hdfs://namenode:8020
    - name: HDFS_CONF_dfs_namenode_rpc_bind_host
      value: 0.0.0.0
    - name: HDFS_CONF_dfs_namenode_servicerpc_bind_host
      value: 0.0.0.0
    - name: HDFS_CONF_dfs_namenode_http_bind_host
      value: 0.0.0.0
    - name: HDFS_CONF_dfs_namenode_datanode_registration_ip___hostname___check
      value: "false"
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    imagePullPolicy: IfNotPresent
    name: namenode
    ports:
    - containerPort: 9870
      protocol: TCP
    - containerPort: 8020
      protocol: TCP
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /hadoop/dfs/name
      name: namenode-storage
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-7v25m
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  nodeName: minikube
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - emptyDir: {}
    name: namenode-storage
  - name: kube-api-access-7v25m
    projected:
      defaultMode: 420
      sources:
      - serviceAccountToken:
          expirationSeconds: 3607
          path: token
      - configMap:
          items:
          - key: ca.crt
            path: ca.crt
          name: kube-root-ca.crt
      - downwardAPI:
          items:
          - fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
            path: namespace
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2025-06-01T06:19:13Z"
    status: "True"
    type: PodReadyToStartContainers
  - lastProbeTime: null
    lastTransitionTime: "2025-05-31T12:52:08Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2025-06-01T06:19:13Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2025-06-01T06:19:13Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2025-05-31T12:52:08Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://c55d6aca84c19bb54f333e8dcf2016d7739a849a777c6012d6e7dbc2bdd9d7a1
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    imageID: docker-pullable://bde2020/hadoop-namenode@sha256:51ad9293ec52083c5003ef0aaab00c3dd7d6335ddf495cc1257f97a272cab4c0
    lastState:
      terminated:
        containerID: docker://42b700300263061c72ee0b9ea1c501e74339c267827efecd5f2d609e2109aef2
        exitCode: 255
        finishedAt: "2025-06-01T06:18:36Z"
        reason: Error
        startedAt: "2025-05-31T12:52:10Z"
    name: namenode
    ready: true
    restartCount: 1
    started: true
    state:
      running:
        startedAt: "2025-06-01T06:19:08Z"
    volumeMounts:
    - mountPath: /hadoop/dfs/name
      name: namenode-storage
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: kube-api-access-7v25m
      readOnly: true
      recursiveReadOnly: Disabled
  hostIP: 192.168.49.2
  hostIPs:
  - ip: 192.168.49.2
  phase: Running
  podIP: 10.244.0.152
  podIPs:
  - ip: 10.244.0.152
  qosClass: BestEffort
  startTime: "2025-05-31T12:52:08Z"
